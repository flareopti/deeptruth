// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: article.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    author_id,
    title,
    content,
    verdict,
    rating
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, author_id, title, content, verdict, rating, created_at
`

type CreateArticleParams struct {
	AuthorID pgtype.Int8
	Title    string
	Content  string
	Verdict  string
	Rating   int64
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.AuthorID,
		arg.Title,
		arg.Content,
		arg.Verdict,
		arg.Rating,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Verdict,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, author_id, title, content, verdict, rating, created_at FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Verdict,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listArticle = `-- name: ListArticle :many
SELECT id, author_id, title, content, verdict, rating, created_at FROM articles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticleParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListArticle(ctx context.Context, arg ListArticleParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticle, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Content,
			&i.Verdict,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET rating = $2, verdict = $3
WHERE id = $1
RETURNING id, author_id, title, content, verdict, rating, created_at
`

type UpdateArticleParams struct {
	ID      int64
	Rating  int64
	Verdict string
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticle, arg.ID, arg.Rating, arg.Verdict)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Verdict,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
