// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: article.sql

package db

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    author_id,
    title,
    content,
    rating
) VALUES (
    $1, $2, $3, $4
) RETURNING id, author_id, title, content, rating, created_at
`

type CreateArticleParams struct {
	AuthorID int64  `json:"author_id"`
	Title    string `json:"title"`
	Content  string `json:"content"`
	Rating   int32  `json:"rating"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.AuthorID,
		arg.Title,
		arg.Content,
		arg.Rating,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, author_id, title, content, rating, created_at FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getArticlesCount = `-- name: GetArticlesCount :one
SELECT COUNT(*) FROM articles
`

func (q *Queries) GetArticlesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getArticlesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, author_id, title, content, rating, created_at FROM articles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Content,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleRating = `-- name: UpdateArticleRating :one
UPDATE articles
SET rating = $2
WHERE id = $1
RETURNING id, author_id, title, content, rating, created_at
`

type UpdateArticleRatingParams struct {
	ID     int64 `json:"id"`
	Rating int32 `json:"rating"`
}

func (q *Queries) UpdateArticleRating(ctx context.Context, arg UpdateArticleRatingParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticleRating, arg.ID, arg.Rating)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
